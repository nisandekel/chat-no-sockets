{"version":3,"sources":["serverService/index.js","components/Banner.js","containers/Login.js","containers/Registertion.js","components/Message.js","components/MassegeList.js","containers/Chat.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","window","location","origin","route","path","Banner","props","bannerClass","color","isDisplayed","react_default","a","createElement","className","msg","Login","state","userName","password","banner","bannerTimeOut","changeUserNameInput","event","_this","setState","target","value","changePasswordInput","handleLogin","auth","concat","btoa","fetch","method","headers","Headers","Authorization","then","res","json","autorized","userLoggedIn","userAvatar","catch","err","name","showBanner","setTimeout","clearTimeout","this","align","cellPadding","Form","Control","type","onChange","colSpan","Button","onClick","src_components_Banner","React","Component","Registretion","secondPassword","changeUserName","changePassword","changeSecondPassword","sendData","_callee","randomAvatar","newUser","regenerator_default","wrap","_context","prev","next","checkValidation","abrupt","getAvatar","sent","avatar","body","JSON","stringify","Content-Type","usrUploded","duplicateUniqeField","stop","length","results","pop","picture","large","console","log","Message","src","alt","dateTime","content","MessageList","messages","map","dateTimeArr","split","charAt","dateTimeFormat","key","id","src_components_Message","Chat","messageList","inputValue","setTimeoutID","inputRef","createRef","changeInputData","sendMsg","getMessages","msgList","lastMessageID","isNeedUpdate","newList","Object","toConsumableArray","newMessages","current","scrollIntoView","isLoggedIn","sendMsgStyle","position","bottom","width","MassegeList","style","ref","placeholder","Header","linkName","title","Navbar","bg","variant","react_router_dom","to","userLoggedOut","App","localStorage","getItem","appTitle","setItem","removeItem","_this2","src_components_Header","react_router","exact","render","src_containers_Login","component","src_containers_Chat","Boolean","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b0f60d2b.chunk.js","sourcesContent":["\r\nexport const baseUrl = window.location.origin;\r\n\r\nexport const route = path => baseUrl + path;","import React from 'react';\r\nimport './Banner.css';\r\n\r\nconst Banner = (props)=>{\r\n\r\n    const bannerClass = props.color===0 ? \"warning\" : \"success\"; \r\n\r\n    return (\r\n        !props.isDisplayed ? null : (\r\n            <div className={bannerClass +\" banner\"}>{props.msg}</div>\r\n        )  \r\n    );\r\n}\r\n\r\nexport default Banner;","import React from 'react';\r\nimport { route } from './../serverService/index';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport Banner from './../components/Banner';\r\nimport './Login.css';\r\n\r\nclass Login extends React.Component {\r\n\r\n    state = { userName: \"\", password: \"\", banner: { isDisplayed: false, msg: \"\", color: null } };\r\n    bannerTimeOut = null;\r\n\r\n    changeUserNameInput = (event) => {\r\n        this.setState({ userName: event.target.value })\r\n    }\r\n\r\n    changePasswordInput = (event) => {\r\n        this.setState({ password: event.target.value })\r\n    }\r\n\r\n    handleLogin = () => {\r\n\r\n        if (this.state.userName === \"\" || this.state.password === \"\") {\r\n            this.showBanner(\"please fill in all fields\",0);\r\n            return;\r\n        }\r\n\r\n        const auth = `Basic ${btoa(`${this.state.userName}:${this.state.password}`)}`;\r\n        \r\n        fetch(route('/users/login'), {\r\n            method: 'POST',\r\n            headers: new Headers({\r\n                Authorization: auth\r\n            })\r\n        }).then(res => res.json())\r\n            .then(res => {\r\n                if (res.autorized) {\r\n                    this.props.userLoggedIn(res.userName,res.userAvatar);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                if (err.name === \"TypeError\") {\r\n                    this.showBanner(\"failed to login\",0);\r\n                }\r\n                else if (err.name === \"SyntaxError\") {\r\n                    this.showBanner(\"one or more fields are incorrect\",0);\r\n                }\r\n            });\r\n    }\r\n\r\n    showBanner = (msg,color) => {\r\n        const banner = { isDisplayed: true, msg, color};\r\n        this.setState({ banner });\r\n        this.bannerTimeOut = setTimeout(() => {\r\n            const banner = { isDisplayed: false, msg: \"\", color: null };\r\n            this.setState({ banner })\r\n        }, 3000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.bannerTimeOut);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <table align=\"center\" className=\"login\" cellPadding=\"10%\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>\r\n                                user name:\r\n                            </td>\r\n                            <td>\r\n                                <Form.Control type=\"text\" value={this.state.userName}\r\n                                    onChange={this.changeUserNameInput} />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                password:\r\n                            </td>\r\n                            <td>\r\n                                <Form.Control type=\"password\" value={this.state.password}\r\n                                    onChange={this.changePasswordInput} />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td colSpan=\"2\">\r\n                                <Button onClick={this.handleLogin}>Login</Button>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                <Banner isDisplayed={this.state.banner.isDisplayed} msg={this.state.banner.msg}\r\n                    color={this.state.banner.color} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport { route } from './../serverService/index';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport Banner from './../components/Banner';\r\nimport './Registretion.css';\r\n\r\n\r\nclass Registretion extends React.Component {\r\n\r\n    state = {\r\n        userName: \"\", password: \"\", secondPassword: \"\",\r\n        banner: { isDisplayed: false, msg: \"\", color: null }\r\n    };\r\n    bannerTimeOut = null;\r\n\r\n    changeUserName = (event) => {\r\n        this.setState({ userName: event.target.value });\r\n    }\r\n\r\n    changePassword = (event) => {\r\n        this.setState({ password: event.target.value });\r\n    }\r\n\r\n    changeSecondPassword = (event) => {\r\n        this.setState({ secondPassword: event.target.value });\r\n    }\r\n\r\n    showBanner = (msg, color) => {\r\n        const banner = { isDisplayed: true, msg, color };\r\n        this.setState({ banner });\r\n        this.bannerTimeOut = setTimeout(() => {\r\n            const banner = { isDisplayed: false, msg: \"\", color: null };\r\n            this.setState({ banner })\r\n        }, 3000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.bannerTimeOut);\r\n    }\r\n\r\n    sendData = async () => {\r\n        if (!this.checkValidation()) {\r\n            return;\r\n        }\r\n        const randomAvatar = await this.getAvatar();\r\n        const newUser = {\r\n            userName: this.state.userName, password: this.state.password,\r\n            secondPassword: this.state.secondPassword, avatar: randomAvatar\r\n        };\r\n        fetch(route(\"/users/registretion\"), {\r\n            method: 'POST',\r\n            body: JSON.stringify(newUser),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                this.setState({ userName: \"\", password: \"\", secondPassword: \"\" });\r\n                if (res.usrUploded) {\r\n                    this.showBanner(\"your deatails were saved!\", 1);\r\n                }\r\n                else if (res.duplicateUniqeField) {\r\n                    this.showBanner(\"user name already exist\", 0);\r\n                }\r\n            })\r\n            .catch(err => this.showBanner(\"failed to register\", 0));\r\n    }\r\n\r\n    checkValidation = () => {\r\n        if (this.state.userName === \"\" || this.state.password === \"\" || this.state.secondPassword === \"\") {\r\n            this.showBanner(\"please fill in all fields\", 0);\r\n            return false;\r\n        }\r\n\r\n        if (this.state.password.length < 8) {\r\n            this.showBanner(\"password has to be at least 8 characters\", 0);\r\n            return false;\r\n        }\r\n\r\n        if (this.state.password !== this.state.secondPassword) {\r\n            this.showBanner(\"first password doesn't match to the second password\", 0);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getAvatar = () => {\r\n        return fetch(\"https://randomuser.me/api/\")\r\n            .then(res => res.json())\r\n            .then(res=>res.results.pop().picture.large)\r\n            .catch(err=>console.log(err));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <table align=\"center\" className=\"registretion\" cellPadding=\"10%\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>\r\n                                user name:\r\n                            </td>\r\n                            <td>\r\n                                <Form.Control type=\"text\" value={this.state.userName}\r\n                                    onChange={this.changeUserName}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                password:\r\n                            </td>\r\n                            <td>\r\n                                <Form.Control type=\"password\" value={this.state.password}\r\n                                    onChange={this.changePassword}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                repeat password:\r\n                            </td>\r\n                            <td>\r\n                                <Form.Control type=\"password\" value={this.state.secondPassword}\r\n                                    onChange={this.changeSecondPassword}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td colSpan={2}>\r\n                                <Button onClick={this.sendData}>submit</Button>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                <Banner isDisplayed={this.state.banner.isDisplayed} msg={this.state.banner.msg}\r\n                    color={this.state.banner.color} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Registretion;","import React from 'react';\r\nimport './Message.css';\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className=\"msg\">\r\n            <div className=\"msg-header\">\r\n                <div className=\"usr-details\">\r\n                    <img className=\"user-avatar\" src={props.userAvatar} alt=\"user avatar\" />\r\n                    <p className=\"usr-name bold-text\">{props.userName}</p>\r\n                </div>\r\n                <p className=\"date-time bold-text\">{props.dateTime}</p>\r\n            </div>\r\n            <p className=\"msg-content\">{props.content}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport Message from './Message';\r\nimport './MessageList.css';\r\n\r\nconst MessageList = (props) => {\r\n\r\n    const messages = props.messages.map(msg => {\r\n        const dateTime = dateTimeFormat(msg.dateTime);\r\n        return (\r\n            <li key={msg.id}>\r\n                <Message id={msg.id} content={msg.content} userName={msg.userName}\r\n                    userAvatar={msg.userAvatar} dateTime={dateTime} />\r\n            </li>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <ul className=\"msg-list\" type=\"none\">\r\n            {messages}\r\n        </ul>\r\n    )\r\n}\r\n\r\nfunction dateTimeFormat(dateTime) {\r\n    const dateTimeArr = dateTime.split(\".\")[0].split(dateTime.charAt(10));\r\n    return dateTimeArr[0] + \" \" + dateTimeArr[1];\r\n}\r\n\r\nexport default MessageList;","import React from 'react';\r\nimport { route } from './../serverService/index';\r\nimport MessageList from '../components/MassegeList';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport './Chat.css';\r\n\r\nclass Chat extends React.Component {\r\n\r\n    state = { messageList: [], inputValue: \"\" };\r\n    setTimeoutID = null;\r\n    inputRef = React.createRef();\r\n\r\n    componentDidMount() {\r\n        if (this.props.isLoggedIn) {\r\n            this.getMessages();\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return this.props.isLoggedIn;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.setTimeoutID);\r\n    }\r\n\r\n    changeInputData = (event) => {\r\n        this.setState({ inputValue: event.target.value });\r\n    }\r\n\r\n    sendMsg = () => {\r\n        const content = this.state.inputValue;\r\n        this.setState({inputValue:\"\"})\r\n        fetch(route('/messages'), {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                content, userName: this.props.userName,\r\n                userAvatar: this.props.userAvatar\r\n            }),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => res.json())\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    getMessages = () => {\r\n        const msgList = this.state.messageList;\r\n        const lastMessageID = msgList.length ? msgList[msgList.length - 1].id : \"emptyList\";\r\n        fetch(route('/messages/' + lastMessageID))\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if (res.isNeedUpdate === true) {\r\n                    const messageList = [...this.state.messageList];\r\n                    const newList = messageList.concat(res.newMessages);\r\n                    this.setState({ messageList: newList });\r\n                    if (lastMessageID !== \"emptyList\" && this.inputRef.current!==null) {\r\n                        this.inputRef.current.scrollIntoView();\r\n                    }\r\n                }\r\n                this.setTimeoutID = setTimeout(this.getMessages, 1000);\r\n            })\r\n    }\r\n\r\n    render() {\r\n        \r\n        let sendMsgStyle = null;\r\n        if(this.state.messageList.length<=2){\r\n            sendMsgStyle = {\r\n                position: \"absolute\",\r\n                bottom: \"0\",\r\n                width: \"100%\"\r\n            }\r\n        }\r\n\r\n        return (\r\n            !this.props.isLoggedIn ? null : (\r\n                <div>\r\n                    <h2 className=\"greet-usr\">Hello {this.props.userName} start chating!</h2>\r\n                    <div className=\"chat\">\r\n                        <MessageList messages={this.state.messageList} />\r\n                        <div className=\"send-msg\" style={sendMsgStyle}>\r\n                            <Form.Control ref={this.inputRef} className=\"chat-input\" type=\"text\"\r\n                                placeholder=\"put text here...\" value={this.state.inputValue}\r\n                                onChange={this.changeInputData} \r\n                                />\r\n                            <Button className=\"send-msg-btn\" onClick={this.sendMsg}>Send</Button>\r\n                        </div>\r\n                    </div>\r\n                </div>)\r\n        );\r\n    }\r\n}\r\n\r\nexport default Chat;","import React from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport './Header.css';\r\n\r\nconst Header = (props) => {\r\n\r\n    const linkName = props.isLoggedIn ? \"Logout\" : \"Login\";\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"title\">\r\n                <img className=\"left-img header-img\" src=\"https://www.freeiconspng.com/uploads/car-wheel-png-image-free-download--car-wheel-png-image-free--11.png\" alt=\"wheel\"/>\r\n                <h1>{props.title}</h1>\r\n                <img className=\"right-img header-img\" src=\"https://www.freeiconspng.com/uploads/car-wheel-png-image-free-download--car-wheel-png-image-free--11.png\" alt=\"wheel\"/>\r\n            </div>\r\n            <Navbar bg=\"dark\" variant=\"dark\" className=\"navbar\">\r\n                <div className=\"navbar-links\">\r\n                    <Link className=\"link\" to=\"/\" onClick={props.userLoggedOut}>{linkName}</Link>\r\n                    <Link className=\"link\" to=\"/Registretion/\">Registretion</Link>\r\n                    {props.isLoggedIn ? (<Link className=\"link\" to=\"/Chat/\">Chat</Link>) : null}\r\n                </div>\r\n            </Navbar>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Login from './containers/Login';\r\nimport Registretion from './containers/Registertion';\r\nimport Chat from './containers/Chat';\r\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\r\nimport Header from './components/Header';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    isLoggedIn: localStorage.getItem(\"isLoggedIn\") || false,\r\n    userName: localStorage.getItem(\"userName\") || \"\",\r\n    userAvatar: localStorage.getItem(\"userAvatar\") || \"\"\r\n  };\r\n  appTitle = \"Rolling Chat\";\r\n\r\n  userLoggedIn = (userName, userAvatar) => {\r\n    localStorage.setItem(\"isLoggedIn\", true);\r\n    localStorage.setItem(\"userName\", userName);\r\n    localStorage.setItem(\"userAvatar\", userAvatar);\r\n    this.setState({ isLoggedIn: true, userName, userAvatar });\r\n  }\r\n\r\n  userLoggedOut = () => {\r\n    localStorage.removeItem(\"isLoggedIn\");\r\n    localStorage.removeItem(\"userName\");\r\n    localStorage.removeItem(\"userAvatar\");\r\n    this.setState({ isLoggedIn: false, userName: \"\" });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Router>\r\n          <Header title={this.appTitle} userLoggedOut={this.userLoggedOut}\r\n            isLoggedIn={this.state.isLoggedIn} />\r\n          <Route path=\"/\" exact render={() => (\r\n            this.state.isLoggedIn ? (<Redirect to='/Chat/' />) :\r\n              (<Login userLoggedIn={this.userLoggedIn} />)\r\n          )} />\r\n          <Route path=\"/Registretion/\" exact component={Registretion} />\r\n          <Route path=\"/Chat/\" exact render={() => <Chat isLoggedIn={this.state.isLoggedIn}\r\n            userName={this.state.userName} userAvatar={this.state.userAvatar}/>} />\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}